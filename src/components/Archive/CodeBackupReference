



  
  
  /* if (coordArr) {
    const lat = +coordArr[0];
    const lon = +coordArr[1];
    map.panTo(new kakao.maps.LatLng(lat, lon));
    setTimeout(() => {
      setSideClosed(false);    
    }, 2000)
  } */

  // 마커 조건문
  for (let i = 0; i < props.cityItemData.length; i++) {
    let data = props.filterState;
    if (
      data[props.cityItemData[i].role]
      && ((props.cityItemData[i].heritage === "1" && data["문화재"])
      || (props.cityItemData[i].heritage === "0" && data["비문화재"]))
      && ((props.cityItemData[i].existence === "1" && data["현존"])
      || (props.cityItemData[i].existence === "0" && data["소실"]))
    ){
      renderMarkers();
    } else {
      continue;  
    }

    // 마커 렌더
    function renderMarkers() {
      const markerSetting = {
      markerSrc: props.cityItemData[i].heritage === "1" ? markerHeritage : markerNonHeritage,
      markerSize: new kakao.maps.Size(40, 60),
      markerOption: { offset: new kakao.maps.Point(35, 70)}
      }
      
      const markerImage 
        = new kakao.maps.MarkerImage(markerSetting.markerSrc, markerSetting.markerSize, markerSetting.markerOption);

      const lat = +props.cityItemData[i]["latitude"];
      const lon = +props.cityItemData[i]["longitude"];
      const position = new kakao.maps.LatLng(lat, lon);
      const marker = new kakao.maps.Marker({
        image: markerImage,
        position: position
      })
      marker.setMap(archiveMap);

      // 마커 추가 이미지.
      /* const link = props.cityItemData[i].imageId ?
      `https://lh3.googleusercontent.com/d/${props.cityItemData[i].imageId.split('/')[5]}=s500?authuser=0`
        : emptyImg;
        
      const content = `
        <div 
          style="
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            width:10vw;
            height:15vh;
            border: 3px solid gray;
            border-radius:10px;
            background-color:rgba(255,255,255,0.8);
            padding:3%;
            transition: 0.1s;
          "
        >
          <img src="${link}" style="width:100%; height: 80%"></img>
          <span 
            style="
              width:100%; 
              height:15%; 
              font-size: 1rem; 
              font-weight:bold;
              text-align:center;
            "
          >
          ${props.cityItemData[i].name}</span>
        </div>
      `;

      const customOverlay = new kakao.maps.CustomOverlay({
        position: position,
        content: content,
        yAnchor: 1.55,
        xAnchor: 0.6,
      })
      kakao.maps.event.addListener(
        marker, 'mouseover', mouseOverListener(map, customOverlay));
      kakao.maps.event.addListener(
        marker, 'mouseout', mouseOutListener(customOverlay));
      kakao.maps.event.addListener(marker, 'click', mouseClickListener);
    }
    function mouseOverListener(map, customOverlay) {
      return () => {
        customOverlay.setMap(map);
      }
    }
    function mouseOutListener(customOverlay) {
      return () => {
        customOverlay.setMap(null);
      }
    } */
    function mouseClickListener() {
      const lat = +props.cityItemData[i].latitude;
      const lon = +props.cityItemData[i].longitude;
      map.panTo(new kakao.maps.LatLng(lat, lon));

      setTimeout(() => {
        setSideClosed(false);
      }, 1000);

      setSeletecItemData({
        "title": props.cityItemData[i].name,
        "subtitle": props.cityItemData[i].subName + " " + props.cityItemData[i].year,
        "desc": props.cityItemData[i].desc,
        "img0": props.cityItemData[i].imageId,
        "img1": props.cityItemData[i].informImage1,
        "img2": props.cityItemData[i].informImage2
      })
    }
  }
}